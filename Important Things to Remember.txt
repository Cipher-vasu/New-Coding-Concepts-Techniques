If the first condition in bitwise and is false then it will not check the second condition,

Whenever you are running an while loop in an array,linked list,etc. and checkin multiple conditions in while loop make sure that first condition you check is that whether address we are pointing right now is in our scope of addresses or not otherwise runtime error will occur because of address sanitizer problem for eg
while(coins>=costs[i] && i<costs.size())                while(i<costs.size() && coins>costs[i])
{                                                       {
	i++;                                            	i++;
}                                                       }
Now, till costs.size()-1 coins is greater so after going inside i will be incremented and point to costs.size() which is not a valid address but so when we will check the first condition of while loop coins>=costs[costs.size()] is not defined and will give runtime error. Under the same circumstances the second block will successfully execute because it is first checking whether i is pointing to valid address or not if it is not pointing it will not check the second condition.

Q. DFS vs BFS. Which would be more efficient ? When would you prefer one over the other ?
Ans : If you were to get such a problem in interview, it's very likely that the interviewer would proceed to ask a follow-up question such as this one. The DFS vs BFS is a vast topic of discussion. But one thing that's for sure (and helpful to know) is none is always better than the other. You would need to have an idea of probable structure of Tree/Graph that would be given as input (and ofcourse what you need to find depending on the question ) to make a better decision about which approach to prefer.

A DFS is easy to implement and generally has advantage of being space-efficient, especially in a balanced / almost balanced Tree and the space required would be O(h) (where h is the height of the tree) while we would require O(2^h) space complexity for BFS traversal which could consume huge amount of memory when tree is balanced & for h is larger.

On the other hand, BFS would perform well if you don't need to search the entire depth of the tree or if the tree is skewed and there are only few branches going very deep. In worst case, the height of a tree h could be equal to n and if there are huge number of nodes, DFS would consume huge amounts of memory & may lead to stackoverflow.

